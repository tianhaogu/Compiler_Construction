int currLine = 1;
int currCol = 1;



VOID (void)
INT (int)
DOUBLE (double)
BOOL (bool)
STRING (string)
CLASS (class)
INTERFACE (interface)
NULL (null)
THIS (this)
EXTENDS (extends)
IMPLEMENTS (implements)
FOR (for)
WHILE (while)
IF (if)
ELSE (else)
RETURN (return)
BREAK (break)
NEW (New)
NEWARRAY (NewArray)

IDENTIFIER ([a-zA-Z][0-9a-zA-Z_]*)
BOOLCONST (true|false)
DEC_DIGIT ([0-9])
HEX_DIGIT ([0-9a-fA-F])
DEC_INT ({DEC_DIGIT}+)
HEX_INT (0[x|X]{HEX_DIGIT}+)
INTCONST ({DEC_INT}|{HEX_INT})
EXPONENT ([e|E][+]?{DEC_INT})
DOUBLECONST ({DEC_INT}\.{DEC_DIGIT}*{EXPONENT}?)
STRINGCONST (\"[^\n\"]*\")

LEQ (<=)
EQ (==)
GEQ (>=)
NEQ (!=)
AND (&&)
OR (\|\|)
OPERATOR ([+*-/%<=>!;,.[\](){}])

NEWLINE (\n)
NOMATCH (.)
STRINGINCONST (\"[^\n\"]*{NEWLINE})







{VOID} {return T_Void;}
{INT} {return T_Int;}
{DOUBLE} {return T_Double;}
{BOOL} {return T_Bool;}
{STRING} {return T_String;}
{CLASS} {return T_Class;}
{INTERFACE} {return T_Interface;}
{NULL} {return T_Null;}
{THIS} {return T_This;}
{EXTENDS} {return T_Extends;}
{IMPLEMENTS} {return T_Implements;}
{FOR} {return T_For;}
{WHILE} {return T_While;}
{IF} {return T_If;}
{ELSE} {return T_Else;}
{RETURN} {return T_Return;}
{BREAK} {return T_Break;}
{NEW} {return T_New;}
{NEWARRAY} {return T_NewArray;}

{IDENTIFIER} {
    if (strlen(yytext) > MaxIdentLen) {
        ReportError::LongIdentifier(&yylloc, yytext);
    }
    int i = 0;
    while (i < strlen(yytext)) {
        yylval.identifier[i] = yytext[i];
        i += 1;
    }
    while (i < MaxIdentLen + 1) {
        yylval.identifier[i] = '\0';
        i += 1;
    }
    return T_Identifier;
}
{STRINGCONST} {
    yylval.stringConstant = yytext;
    return T_StringConstant;
}
{INTCONST} {
    bool check_dec = true;
    for (int i = 0; i < strlen(yytext); i++) {
        if (isdigit(yytext[i]) == 0) {
            check_dec = false;
            break;
        }
    }
    yylval.integerConstant = (check_dec == true) ? strtol(yytext, NULL, 10) : strtol(yytext, NULL, 16);
    return T_IntConstant;
}
{DOUBLECONST} {
    yylval.doubleConstant = atof(yytext);
    return T_DoubleConstant;
}
{BOOLCONST} {
    yylval.boolConstant = (yytext == "true") ? true : false;
    return T_BoolConstant;
}

{OPERATOR} {return yytext[0];}
{LEQ} {return T_LessEqual;}
{GEQ} {return T_GreaterEqual;}
{EQ} {return T_Equal;}
{NEQ} {return T_NotEqual;}
{AND} {return T_And;}
{OR} {return T_Or;}

{NEWLINE} {
    currLine += 1;
    currCol = 1;
}
{NOMATCH} {ReportError::UnrecogChar(&yylloc, *yytext);}
{STRINGINCONST} {
    ReportError::UntermString(&yylloc, yytext);
    currLine += 1;
    currCol = 1;
}




yylloc.first_line = currLine;
yylloc.last_line = currLine;
yylloc.first_column = currCol;
yylloc.last_column = currCol + strlen(yytext) - 1;
